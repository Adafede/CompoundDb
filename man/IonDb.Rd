% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IonDb.R, R/IonDb-methods.R
\name{IonDb}
\alias{IonDb}
\alias{IonDb-method}
\alias{show,IonDb-method}
\alias{ionVariables}
\alias{ionVariables,IonDb-method}
\alias{ions,IonDb-method}
\alias{insertIon,IonDb-method}
\title{Simple database containing compound (metabolite) and ion information}
\usage{
IonDb(x, cdb, ions)

\S4method{ionVariables}{IonDb}(object, includeId = FALSE, ...)

\S4method{ions}{IonDb}(
  object,
  columns = ionVariables(object),
  filter,
  return.type = c("data.frame", "tibble"),
  ...
)

\S4method{insertIon}{IonDb}(object, ions)
}
\arguments{
\item{x}{For \code{IonDb}: database connection (should be to empty database?) or
\code{character(1)} with the file name of the SQLite database where the
\code{IonDb} data will be stored.\preformatted{For all other methods: a `IonDb` object.
}}

\item{cdb}{for \code{IonDb}: \code{CompDb} object used to construct a \code{IonDb} object
(the content of \code{cdb} is copied to the \code{IonDb} object).}

\item{ions}{for \code{IonDb}: table to be added to the \code{IonDb} object (if missing
an empty table is added). \code{ions} is required to have the columns
"compound_id", "ion_adduct", "ion_mz" and "ion_rt".}

\item{object}{For all methods: a \code{IonDb} object.}

\item{includeId}{for \code{ionVariables}: \code{logical(1)} whether the ion
ID (column \code{"ms_ion_id"}) should be included in the result. The
default is \code{includeId = FALSE}.}

\item{...}{additional arguments. Currently not used.}

\item{columns}{For \code{ions}: \code{character} with the names of the database
columns that should be retrieved. Use \code{ionVariables} for a list
of available column names.}

\item{filter}{For \code{ions}: filter expression or \code{\link[=AnnotationFilter]{AnnotationFilter()}} defining
a filter to be used to retrieve specific elements from the database.}

\item{return.type}{For \code{ions}: either \code{"data.frame"} or \code{"tibble"} to
return the result as a \code{\link[=data.frame]{data.frame()}} or \code{\link[=tibble]{tibble()}}, respectively.}
}
\description{
\code{IonDb} objects extends \code{CompDb} by adding ions measured on a certain LC-MS
setup. The data is stored internally in a database (usually an SQLite
database).
}
\details{
\code{IonDb} objects should be created using the constructor function
\code{IonDb} providing a database connection, a \code{CompDb} object and a table with
ions (the content of the \code{CompDb} object and ion table is copied to
the database pointed by the connection). Alternatively it is possible to
directly pass just the database connection to an already existing database
(with all the required tables) and load it as a \code{IonDb}.
}
\section{Retrieve annotations and ion information from the database}{


Annotations/compound informations can be retrieved from a \code{IonDb} in the same
way as thay are extracted from a \code{CompDb}. In addition to that the function
\code{ions} allows to retrieve ion information from the \code{IonDb} object. It returns
the actual data as a \code{data.frame} (if \code{return.type = "data.frame"}) or a
\code{\link[tibble:tibble]{tibble::tibble()}} (if \code{return.type = "tibble"}). A \code{ions} call will always
return all elements from the \emph{ms_ion} table (unless a \code{filter} is used).
}

\section{General functions (beside those inherited from \code{CompDb})}{

\itemize{
\item \code{IonDb}: connect to a compound/ion database.
\item \code{ionVariables}: returns all available columns/database fields for ions.
\item \code{insertIon}: allows to add further ions to the \code{IonDb} object.
}
}

\section{Filtering the database}{


Like \code{compounds} and \code{Spectra} also \code{ions} allows to filter the
results using specific filter classes and expressions. Filtering uses the
concepts from Bioconductor's \code{AnnotationFilter} package. All information
for a certain compound with the ID \code{"1"} can for example be
retrieved by passing the filter expression \code{filter = ~ ion_id == "1"} to
the \code{ions} function.

Use the \link{supportedFilters} function on the \link{IonDb} object to get a list of
all supported filters. See also examples below or the usage vignette for
details.
}

\examples{

}
\author{
Andrea Vicini, Johannes Rainer
}
