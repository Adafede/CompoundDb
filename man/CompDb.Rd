% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CompDb.R, R/CompDb-methods.R
\docType{methods}
\name{CompDb}
\alias{CompDb}
\alias{CompDb-class}
\alias{show}
\alias{dbconn,CompDb-method}
\alias{show,CompDb-method}
\alias{CompDb}
\alias{hasSpectra}
\alias{compounds}
\alias{src_compdb}
\alias{tables}
\alias{dbconn,CompDb-method}
\title{Simple compound (metabolite) databases}
\usage{
show(object)

CompDb(x)

hasSpectra(x)

compounds(x, columns, filter, return.type = "data.frame")

src_compdb(x)

tables(x)

\S4method{dbconn}{CompDb}(x)
}
\arguments{
\item{x}{For \code{CompDb}: \code{character(1)} with the file name of the SQLite
compound database. Alternatively it is possible to provide the connection
to the database with parameter \code{x}.\preformatted{For all other methods: a `CompDb` object.
}}

\item{columns}{For \code{compounds}: \code{character} with the names of the database
columns that should be retrieved. Use \code{tables} for a list of available
column names. \code{"compound_id"} will always be}

\item{filter}{For \code{compounds}: not yet supported.}

\item{return.type}{For \code{compounds}: \code{character} defining the type/class of
the return object. Can be either \code{"data.frame"} (default) or
\code{"tibble"}.}

\item{object}{For all methods: a \code{CompDb} object.}
}
\description{
\code{CompDb} objects provide access to general (metabolite) compound
annotations along with \emph{metadata} information such as the annotation's
source, date and release version. The data is stored internally in a
database (usually an SQLite database).

\code{CompDb} \emph{constructs} a \code{CompDb} object by connecting
to the provided database file.

\code{hasSpectra} returns \code{TRUE} if MS/MS spectrum data is available
in the database and \code{FALSE} otherwise.

\code{compounds} extracts compound data from the \code{CompDb} object. In contrast
to \code{src_compdb} it returns the actual data as a \code{data.frame} (if
\code{return.type = "data.frame"}) or a \code{\link[tibble:tibble]{tibble::tibble()}} (if
\code{return.type = "tibble"}).

\code{src_compdb} provides access to the \code{CompDb}'s database \emph{via}
the functionality from the \code{dplyr}/\code{dbplyr} package.

\code{tables} returns a named \code{list} (names being table names) with
the fields/columns from each table in the database.

\code{dbconn} returns the connection (\code{DBIConnection}) to the
database.
}
\details{
\code{CompDb} objects should be created using the constructor function
\code{CompDb} providing the name of the (SQLite) database file providing
the compound annotation data.
}
\examples{

## Create a small CompDb from a provided HMDB subset
cmps <- compound_tbl_sdf(system.file("sdf/HMDB_sub.sdf",
    package = "CompoundDb"))
metad <- data.frame(name = c("source", "url", "source_version",
    "source_date", "organism"),
    value = c("sub_HMDB", "http://www.hmdb.ca", "4", "2017", "Hsapiens"),
    stringsAsFactors = FALSE)
## Create the SQLite database:
db_file <- createCompDb(cmps, metadata = metad, path = tempdir())

## Create a CompDb object
cmp_db <- CompDb(db_file)
cmp_db

## List all tables in the database and their columns
tables(cmp_db)

## Extract a data.frame with the id, name and inchi of all compounds
compounds(cmp_db, columns = c("compound_id", "compound_name", "inchi"))

## Add also the synonyms (aliases) for the compounds. This will cause the
## tables compound and synonym to be joined. The elements of the compound_id
## and compound_name are now no longer unique
res <- compounds(cmp_db, columns = c("compound_id", "compound_name", "synonym"))
head(res)

## Using return.type = "tibble" the result will be returned as a "tibble"
compounds(cmp_db, return.type = "tibble")

## Use the CompDb in a dplyr setup
library(dplyr)
src_cmp <- src_compdb(cmp_db)
src_cmp

## Get a tbl for the compound table
cmp_tbl <- tbl(src_cmp, "compound")

## Extract the id, name and inchi
cmp_tbl \%>\% select(compound_id, compound_name, inchi) \%>\% collect()
}
\seealso{
\code{\link[=createCompDb]{createCompDb()}} for the function to create a SQLite compound
database.
}
\author{
Johannes Rainer
}
